module.exports =
/******/ (function(modules, runtime) { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	__webpack_require__.ab = __dirname + "/";
/******/
/******/ 	// the startup function
/******/ 	function startup() {
/******/ 		// Load entry module and return exports
/******/ 		return __webpack_require__(826);
/******/ 	};
/******/
/******/ 	// run startup
/******/ 	return startup();
/******/ })
/************************************************************************/
/******/ ({

/***/ 43:
/***/ (function(__unusedmodule, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(163);
class DMMFClass {
    constructor({ datamodel, schema, mappings }) {
        this.outputTypeMap = {};
        this.datamodel = datamodel;
        this.schema = schema;
        this.mappings = mappings;
        this.enumMap = this.getEnumMap();
        this.queryType = this.getQueryType();
        this.mutationType = this.getMutationType();
        this.modelMap = this.getModelMap();
        this.inputTypes = this.schema.inputTypes;
        this.inputTypeMap = this.getInputTypeMap();
        this.outputTypes = this.schema.outputTypes;
        this.outputTypeMap = this.getOutputTypeMap();
        // needed as references are not kept
        this.queryType = this.outputTypeMap.Query;
        this.mutationType = this.outputTypeMap.Mutation;
    }
    getInputType(inputTypeName) {
        const inputType = this.inputTypeMap[inputTypeName];
        if (!inputType) {
            throw new Error('Could not find input type name: ' + inputTypeName);
        }
        return inputType;
    }
    getOutputType(outputTypeName) {
        const outputType = this.outputTypeMap[outputTypeName];
        if (!outputType) {
            throw new Error('Could not find output type name: ' + outputTypeName);
        }
        return outputType;
    }
    getEnumType(enumTypeName) {
        const enumType = this.enumMap[enumTypeName];
        if (!enumType) {
            throw new Error('Could not find enum type name: ' + enumTypeName);
        }
        return enumType;
    }
    getModelOrThrow(modelName) {
        const model = this.modelMap[modelName];
        if (!model) {
            throw new Error('Could not find model for model: ' + modelName);
        }
        return model;
    }
    hasModel(modelName) {
        const model = this.modelMap[modelName];
        if (!model) {
            return false;
        }
        return true;
    }
    getMapping(modelName) {
        const mapping = this.mappings.find(m => m.model === modelName);
        if (!mapping) {
            throw new Error('Could not find mapping for model: ' + modelName);
        }
        return mapping;
    }
    getQueryType() {
        return this.schema.outputTypes.find(t => t.name === 'Query');
    }
    getMutationType() {
        return this.schema.outputTypes.find(t => t.name === 'Mutation');
    }
    getEnumMap() {
        return utils_1.keyBy(this.schema.enums, e => e.name);
    }
    getModelMap() {
        return utils_1.keyBy(this.datamodel.models, m => m.name);
    }
    getOutputTypeMap() {
        return utils_1.keyBy(this.outputTypes, t => t.name);
    }
    getInputTypeMap() {
        return utils_1.keyBy(this.schema.inputTypes, t => t.name);
    }
}
exports.DMMFClass = DMMFClass;


/***/ }),

/***/ 154:
/***/ (function(__unusedmodule, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function transformDMMF(document) {
    return {
        datamodel: transformDatamodel(document.datamodel),
        mappings: document.mappings,
        schema: transformSchema(document.schema),
    };
}
exports.transformDMMF = transformDMMF;
function transformMappings(mappings) {
    return mappings.map(mapping => (Object.assign({}, mapping, { findOne: mapping.model.toLowerCase() })));
}
function transformDatamodel(datamodel) {
    return {
        enums: datamodel.enums,
        models: datamodel.models.map(model => (Object.assign({}, model, { fields: model.fields.map(field => (Object.assign({}, field, { kind: field.kind === 'object' ? 'relation' : field.kind }))) }))),
    };
}
function transformSchema(schema) {
    return {
        enums: schema.enums,
        inputTypes: schema.inputTypes.map(transformInputType),
        outputTypes: schema.outputTypes.map(o => (Object.assign({}, o, { fields: o.fields.map(f => (Object.assign({}, f, { args: transformArgs(f.args), outputType: Object.assign({}, f.outputType, { type: getReturnTypeName(f.outputType.type) }) }))) }))),
    };
}
function transformArgs(args) {
    return args.map(transformArg);
}
function transformArg(arg) {
    let inputType = arg.inputType.find(a => a.kind === 'object');
    if (!inputType) {
        inputType = arg.inputType[0];
    }
    return {
        name: arg.name,
        inputType: Object.assign({}, inputType, { type: getReturnTypeName(inputType.type) }),
        isRelationFilter: undefined,
    };
}
function transformInputType(inputType) {
    return Object.assign({}, inputType, { fields: transformArgs(inputType.fields) });
}
function getReturnTypeName(type) {
    if (typeof type === 'string') {
        return type;
    }
    return type.name;
}
function isWhereOrOrderByArgOrFilter(typeName) {
    if (typeName.endsWith('WhereInput') && typeName !== 'WhereInput') {
        return true;
    }
    if (isRelationFilterArg(typeName)) {
        return true;
    }
    return typeName.endsWith('OrderByInput') && typeName !== 'OrderByInput';
}
function isRelationFilterArg(type) {
    return (type.endsWith('Filter') &&
        ![
            'IntFilter',
            'StringFilter',
            'BooleanFilter',
            'NullableStringFilter',
            'FloatFilter',
        ].includes(type) &&
        type !== 'Filter');
}
function argTypeName(modelName, typeName) {
    if (isWhereOrOrderByArgOrFilter(typeName)) {
        return `${modelName}${typeName}`;
    }
    return typeName;
}


/***/ }),

/***/ 163:
/***/ (function(__unusedmodule, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __webpack_require__(622);
exports.keyBy = (collection, iteratee) => {
    return collection.reduce((acc, curr) => {
        acc[iteratee(curr)] = curr;
        return acc;
    }, {});
};
exports.upperFirst = (s) => {
    return s.replace(/^\w/, c => c.toUpperCase());
};
function flatMap(array, callbackfn) {
    return Array.prototype.concat(...array.map(callbackfn));
}
exports.flatMap = flatMap;
function nexusOpts(param) {
    return {
        type: param.type,
        list: param.isList ? true : undefined,
        nullable: !param.isRequired,
    };
}
exports.nexusOpts = nexusOpts;
function assertPhotonInContext(photon) {
    if (!photon) {
        throw new Error('Could not find photon in context');
    }
}
exports.assertPhotonInContext = assertPhotonInContext;
function trimIfInNodeModules(path) {
    if (path.includes('node_modules')) {
        return path.substring(path.lastIndexOf('node_modules') + 'node_modules'.length + 1);
    }
    return path;
}
exports.trimIfInNodeModules = trimIfInNodeModules;
function getImportPathRelativeToOutput(from, to) {
    if (to.includes('node_modules')) {
        return trimIfInNodeModules(to);
    }
    let relativePath = path_1.relative(from, to);
    if (!relativePath.startsWith('.')) {
        relativePath = './' + relativePath;
    }
    // remove .ts or .js file extension
    relativePath = relativePath.replace(/\.(ts|js)$/, '');
    // remove /index
    relativePath = relativePath.replace(/\/index$/, '');
    // replace \ with /
    relativePath = relativePath.replace(/\\/g, '/');
    return relativePath;
}
exports.getImportPathRelativeToOutput = getImportPathRelativeToOutput;
function getCRUDFieldName(modelName, fieldName, mapping, namingStrategy) {
    const operationName = Object.keys(mapping).find(key => mapping[key] === fieldName);
    if (!operationName || !namingStrategy[operationName]) {
        throw new Error(`Could not find mapping for field ${fieldName}`);
    }
    return namingStrategy[operationName](fieldName, modelName);
}
exports.getCRUDFieldName = getCRUDFieldName;


/***/ }),

/***/ 247:
/***/ (function(module) {

/* global define */

(function (root, pluralize) {
  /* istanbul ignore else */
  if (true) {
    // Node.
    module.exports = pluralize();
  } else {}
})(this, function () {
  // Rule storage - pluralize and singularize need to be run sequentially,
  // while other rules can be optimized using an object for instant lookups.
  var pluralRules = [];
  var singularRules = [];
  var uncountables = {};
  var irregularPlurals = {};
  var irregularSingles = {};

  /**
   * Sanitize a pluralization rule to a usable regular expression.
   *
   * @param  {(RegExp|string)} rule
   * @return {RegExp}
   */
  function sanitizeRule (rule) {
    if (typeof rule === 'string') {
      return new RegExp('^' + rule + '$', 'i');
    }

    return rule;
  }

  /**
   * Pass in a word token to produce a function that can replicate the case on
   * another word.
   *
   * @param  {string}   word
   * @param  {string}   token
   * @return {Function}
   */
  function restoreCase (word, token) {
    // Tokens are an exact match.
    if (word === token) return token;

    // Lower cased words. E.g. "hello".
    if (word === word.toLowerCase()) return token.toLowerCase();

    // Upper cased words. E.g. "WHISKY".
    if (word === word.toUpperCase()) return token.toUpperCase();

    // Title cased words. E.g. "Title".
    if (word[0] === word[0].toUpperCase()) {
      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();
    }

    // Lower cased words. E.g. "test".
    return token.toLowerCase();
  }

  /**
   * Interpolate a regexp string.
   *
   * @param  {string} str
   * @param  {Array}  args
   * @return {string}
   */
  function interpolate (str, args) {
    return str.replace(/\$(\d{1,2})/g, function (match, index) {
      return args[index] || '';
    });
  }

  /**
   * Replace a word using a rule.
   *
   * @param  {string} word
   * @param  {Array}  rule
   * @return {string}
   */
  function replace (word, rule) {
    return word.replace(rule[0], function (match, index) {
      var result = interpolate(rule[1], arguments);

      if (match === '') {
        return restoreCase(word[index - 1], result);
      }

      return restoreCase(match, result);
    });
  }

  /**
   * Sanitize a word by passing in the word and sanitization rules.
   *
   * @param  {string}   token
   * @param  {string}   word
   * @param  {Array}    rules
   * @return {string}
   */
  function sanitizeWord (token, word, rules) {
    // Empty string or doesn't need fixing.
    if (!token.length || uncountables.hasOwnProperty(token)) {
      return word;
    }

    var len = rules.length;

    // Iterate over the sanitization rules and use the first one to match.
    while (len--) {
      var rule = rules[len];

      if (rule[0].test(word)) return replace(word, rule);
    }

    return word;
  }

  /**
   * Replace a word with the updated word.
   *
   * @param  {Object}   replaceMap
   * @param  {Object}   keepMap
   * @param  {Array}    rules
   * @return {Function}
   */
  function replaceWord (replaceMap, keepMap, rules) {
    return function (word) {
      // Get the correct token and case restoration functions.
      var token = word.toLowerCase();

      // Check against the keep object map.
      if (keepMap.hasOwnProperty(token)) {
        return restoreCase(word, token);
      }

      // Check against the replacement map for a direct word replacement.
      if (replaceMap.hasOwnProperty(token)) {
        return restoreCase(word, replaceMap[token]);
      }

      // Run all the rules against the word.
      return sanitizeWord(token, word, rules);
    };
  }

  /**
   * Check if a word is part of the map.
   */
  function checkWord (replaceMap, keepMap, rules, bool) {
    return function (word) {
      var token = word.toLowerCase();

      if (keepMap.hasOwnProperty(token)) return true;
      if (replaceMap.hasOwnProperty(token)) return false;

      return sanitizeWord(token, token, rules) === token;
    };
  }

  /**
   * Pluralize or singularize a word based on the passed in count.
   *
   * @param  {string}  word      The word to pluralize
   * @param  {number}  count     How many of the word exist
   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)
   * @return {string}
   */
  function pluralize (word, count, inclusive) {
    var pluralized = count === 1
      ? pluralize.singular(word) : pluralize.plural(word);

    return (inclusive ? count + ' ' : '') + pluralized;
  }

  /**
   * Pluralize a word.
   *
   * @type {Function}
   */
  pluralize.plural = replaceWord(
    irregularSingles, irregularPlurals, pluralRules
  );

  /**
   * Check if a word is plural.
   *
   * @type {Function}
   */
  pluralize.isPlural = checkWord(
    irregularSingles, irregularPlurals, pluralRules
  );

  /**
   * Singularize a word.
   *
   * @type {Function}
   */
  pluralize.singular = replaceWord(
    irregularPlurals, irregularSingles, singularRules
  );

  /**
   * Check if a word is singular.
   *
   * @type {Function}
   */
  pluralize.isSingular = checkWord(
    irregularPlurals, irregularSingles, singularRules
  );

  /**
   * Add a pluralization rule to the collection.
   *
   * @param {(string|RegExp)} rule
   * @param {string}          replacement
   */
  pluralize.addPluralRule = function (rule, replacement) {
    pluralRules.push([sanitizeRule(rule), replacement]);
  };

  /**
   * Add a singularization rule to the collection.
   *
   * @param {(string|RegExp)} rule
   * @param {string}          replacement
   */
  pluralize.addSingularRule = function (rule, replacement) {
    singularRules.push([sanitizeRule(rule), replacement]);
  };

  /**
   * Add an uncountable word rule.
   *
   * @param {(string|RegExp)} word
   */
  pluralize.addUncountableRule = function (word) {
    if (typeof word === 'string') {
      uncountables[word.toLowerCase()] = true;
      return;
    }

    // Set singular and plural references for the word.
    pluralize.addPluralRule(word, '$0');
    pluralize.addSingularRule(word, '$0');
  };

  /**
   * Add an irregular word definition.
   *
   * @param {string} single
   * @param {string} plural
   */
  pluralize.addIrregularRule = function (single, plural) {
    plural = plural.toLowerCase();
    single = single.toLowerCase();

    irregularSingles[single] = plural;
    irregularPlurals[plural] = single;
  };

  /**
   * Irregular rules.
   */
  [
    // Pronouns.
    ['I', 'we'],
    ['me', 'us'],
    ['he', 'they'],
    ['she', 'they'],
    ['them', 'them'],
    ['myself', 'ourselves'],
    ['yourself', 'yourselves'],
    ['itself', 'themselves'],
    ['herself', 'themselves'],
    ['himself', 'themselves'],
    ['themself', 'themselves'],
    ['is', 'are'],
    ['was', 'were'],
    ['has', 'have'],
    ['this', 'these'],
    ['that', 'those'],
    // Words ending in with a consonant and `o`.
    ['echo', 'echoes'],
    ['dingo', 'dingoes'],
    ['volcano', 'volcanoes'],
    ['tornado', 'tornadoes'],
    ['torpedo', 'torpedoes'],
    // Ends with `us`.
    ['genus', 'genera'],
    ['viscus', 'viscera'],
    // Ends with `ma`.
    ['stigma', 'stigmata'],
    ['stoma', 'stomata'],
    ['dogma', 'dogmata'],
    ['lemma', 'lemmata'],
    ['schema', 'schemata'],
    ['anathema', 'anathemata'],
    // Other irregular rules.
    ['ox', 'oxen'],
    ['axe', 'axes'],
    ['die', 'dice'],
    ['yes', 'yeses'],
    ['foot', 'feet'],
    ['eave', 'eaves'],
    ['goose', 'geese'],
    ['tooth', 'teeth'],
    ['quiz', 'quizzes'],
    ['human', 'humans'],
    ['proof', 'proofs'],
    ['carve', 'carves'],
    ['valve', 'valves'],
    ['looey', 'looies'],
    ['thief', 'thieves'],
    ['groove', 'grooves'],
    ['pickaxe', 'pickaxes'],
    ['passerby', 'passersby']
  ].forEach(function (rule) {
    return pluralize.addIrregularRule(rule[0], rule[1]);
  });

  /**
   * Pluralization rules.
   */
  [
    [/s?$/i, 's'],
    [/[^\u0000-\u007F]$/i, '$0'],
    [/([^aeiou]ese)$/i, '$1'],
    [/(ax|test)is$/i, '$1es'],
    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],
    [/(e[mn]u)s?$/i, '$1s'],
    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],
    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
    [/(seraph|cherub)(?:im)?$/i, '$1im'],
    [/(her|at|gr)o$/i, '$1oes'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
    [/sis$/i, 'ses'],
    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
    [/([^aeiouy]|qu)y$/i, '$1ies'],
    [/([^ch][ieo][ln])ey$/i, '$1ies'],
    [/(x|ch|ss|sh|zz)$/i, '$1es'],
    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
    [/\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],
    [/(pe)(?:rson|ople)$/i, '$1ople'],
    [/(child)(?:ren)?$/i, '$1ren'],
    [/eaux$/i, '$0'],
    [/m[ae]n$/i, 'men'],
    ['thou', 'you']
  ].forEach(function (rule) {
    return pluralize.addPluralRule(rule[0], rule[1]);
  });

  /**
   * Singularization rules.
   */
  [
    [/s$/i, ''],
    [/(ss)$/i, '$1'],
    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
    [/ies$/i, 'y'],
    [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],
    [/\b(mon|smil)ies$/i, '$1ey'],
    [/\b((?:tit)?m|l)ice$/i, '$1ouse'],
    [/(seraph|cherub)im$/i, '$1'],
    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],
    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],
    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],
    [/(test)(?:is|es)$/i, '$1is'],
    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
    [/(alumn|alg|vertebr)ae$/i, '$1a'],
    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
    [/(matr|append)ices$/i, '$1ix'],
    [/(pe)(rson|ople)$/i, '$1rson'],
    [/(child)ren$/i, '$1'],
    [/(eau)x?$/i, '$1'],
    [/men$/i, 'man']
  ].forEach(function (rule) {
    return pluralize.addSingularRule(rule[0], rule[1]);
  });

  /**
   * Uncountable rules.
   */
  [
    // Singular words with no plurals.
    'adulthood',
    'advice',
    'agenda',
    'aid',
    'aircraft',
    'alcohol',
    'ammo',
    'analytics',
    'anime',
    'athletics',
    'audio',
    'bison',
    'blood',
    'bream',
    'buffalo',
    'butter',
    'carp',
    'cash',
    'chassis',
    'chess',
    'clothing',
    'cod',
    'commerce',
    'cooperation',
    'corps',
    'debris',
    'diabetes',
    'digestion',
    'elk',
    'energy',
    'equipment',
    'excretion',
    'expertise',
    'firmware',
    'flounder',
    'fun',
    'gallows',
    'garbage',
    'graffiti',
    'hardware',
    'headquarters',
    'health',
    'herpes',
    'highjinks',
    'homework',
    'housework',
    'information',
    'jeans',
    'justice',
    'kudos',
    'labour',
    'literature',
    'machinery',
    'mackerel',
    'mail',
    'media',
    'mews',
    'moose',
    'music',
    'mud',
    'manga',
    'news',
    'only',
    'personnel',
    'pike',
    'plankton',
    'pliers',
    'police',
    'pollution',
    'premises',
    'rain',
    'research',
    'rice',
    'salmon',
    'scissors',
    'series',
    'sewage',
    'shambles',
    'shrimp',
    'software',
    'species',
    'staff',
    'swine',
    'tennis',
    'traffic',
    'transportation',
    'trout',
    'tuna',
    'wealth',
    'welfare',
    'whiting',
    'wildebeest',
    'wildlife',
    'you',
    /pok[eé]mon$/i,
    // Regexes.
    /[^aeiou]ese$/i, // "chinese", "japanese"
    /deer$/i, // "deer", "reindeer"
    /fish$/i, // "fish", "blowfish", "angelfish"
    /measles$/i,
    /o[iu]s$/i, // "carnivorous"
    /pox$/i, // "chickpox", "smallpox"
    /sheep$/i
  ].forEach(pluralize.addUncountableRule);

  return pluralize;
});


/***/ }),

/***/ 313:
/***/ (function(module) {

module.exports = require("nexus");

/***/ }),

/***/ 622:
/***/ (function(module) {

module.exports = require("path");

/***/ }),

/***/ 644:
/***/ (function(__unusedmodule, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nexus_1 = __webpack_require__(313);
exports.GQL_SCALARS_NAMES = ['Int', 'Float', 'String', 'ID', 'Boolean'];
exports.dateTimeScalar = nexus_1.scalarType({
    name: 'DateTime',
    description: 'DateTime',
    parseLiteral(value) {
        return value;
    },
    serialize(value) {
        return value;
    },
    parseValue(value) {
        return value;
    },
});


/***/ }),

/***/ 656:
/***/ (function(__unusedmodule, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nexus_1 = __webpack_require__(313);
const dmmf_transformer_1 = __webpack_require__(154);
const DMMFClass_1 = __webpack_require__(43);
const utils_1 = __webpack_require__(163);
const NamingStrategies_1 = __webpack_require__(755);
const scalars_1 = __webpack_require__(644);
const supported_ops_1 = __webpack_require__(954);
class NexusPrismaBuilder {
    constructor(params) {
        this.params = params;
        let transformedDMMF;
        if (process.env.NEXUS_PRISMA_DEBUG) {
            // Using eval so that ncc doesn't include it in the build
            transformedDMMF = dmmf_transformer_1.transformDMMF(eval(`require('@generated/photon'`).dmmf);
        }
        else {
            // @ts-ignore
            transformedDMMF = __DMMF__;
        }
        this.dmmf = new DMMFClass_1.DMMFClass(transformedDMMF);
        this.argsNamingStrategy = NamingStrategies_1.defaultArgsNamingStrategy;
        this.fieldNamingStrategy = NamingStrategies_1.defaultFieldNamingStrategy;
        this.visitedInputTypesMap = {};
        this.whitelistMap = {};
        if (!this.params.photon) {
            this.params.photon = ctx => ctx.photon;
        }
    }
    getNexusPrismaMethod() {
        return [
            this.getCRUDDynamicOutputMethod(),
            this.getModelDynamicOutputMethod(),
            ...this.getPrismaScalars(),
        ];
    }
    /**
     * Generate `t.crud` output method
     */
    getCRUDDynamicOutputMethod() {
        //const methodName = this.params.methodName ? this.params.methodName : 'crud';
        return nexus_1.dynamicOutputProperty({
            name: 'crud',
            typeDefinition: `: NexusPrisma<TypeName, 'crud'>`,
            factory: ({ typeDef: t, typeName: graphQLTypeName }) => {
                if (graphQLTypeName !== 'Query' && graphQLTypeName !== 'Mutation') {
                    throw new Error(`t.crud can only be used on a 'Query' & 'Mutation' objectType. Please use 't.model' instead`);
                }
                if (graphQLTypeName === 'Query') {
                    const queryFields = this.dmmf.mappings.map(mapping => {
                        const queriesNames = supported_ops_1.getSupportedQueries(mapping);
                        return {
                            fields: this.dmmf.queryType.fields.filter(query => queriesNames.includes(query.name)),
                            mapping,
                        };
                    });
                    return this.buildSchemaForCRUD(t, 'Query', queryFields);
                }
                if (graphQLTypeName === 'Mutation') {
                    const mutationFields = this.dmmf.mappings.map(mapping => {
                        const mutationsNames = supported_ops_1.getSupportedMutations(mapping);
                        return {
                            fields: this.dmmf.mutationType.fields.filter(mutation => mutationsNames.includes(mutation.name)),
                            mapping,
                        };
                    });
                    return this.buildSchemaForCRUD(t, 'Mutation', mutationFields);
                }
            },
        });
    }
    /**
     * Generate `t.model` output method
     */
    getModelDynamicOutputMethod() {
        // const methodName = this.params.methodName
        //   ? this.params.methodName
        //   : 'model';
        return nexus_1.dynamicOutputProperty({
            name: 'model',
            typeDefinition: `: NexusPrisma<TypeName, 'model'>`,
            factory: ({ typeDef: t, typeName: graphQLTypeName }) => {
                const modelDefinition = this.dmmf.hasModel(graphQLTypeName)
                    ? this.buildModel(t, graphQLTypeName)
                    : (modelName) => this.buildModel(t, modelName);
                return modelDefinition;
            },
        });
    }
    buildModel(t, graphQLTypeName) {
        return this.buildSchemaForPrismaModel(graphQLTypeName, graphQLTypeName, t);
    }
    computeArgsFromField(prismaModelName, graphQLTypeName, operationName, field, opts) {
        let args = [];
        if (graphQLTypeName === 'Mutation') {
            args = field.args;
        }
        else if (operationName === 'findOne') {
            args = field.args;
        }
        else {
            args = this.argsForQueryOrModelField(prismaModelName, graphQLTypeName, field, opts);
        }
        return this.dmmfArgsToNexusArgs(graphQLTypeName, field, args);
    }
    argsForQueryOrModelField(prismaModelName, graphQLTypeName, field, opts) {
        let args = [];
        if (opts.filtering) {
            const whereTypeName = `${field.outputType.type}WhereInput`;
            const whereArg = field.args.find(a => a.inputType.type === whereTypeName && a.name === 'where');
            if (!whereArg) {
                throw new Error(`Could not find filtering argument for ${prismaModelName}.${field.name}. Searched for a field param with type "${whereTypeName}". Actual fields were ${field.args}`);
            }
            if (opts.filtering !== true) {
                this.whitelistMap[this.argTypeName(graphQLTypeName, field.name, whereArg.inputType.type, whereArg.inputType.kind)] = Object.keys(opts.filtering).filter(fieldName => opts.filtering[fieldName] === true);
            }
            args.push(whereArg);
        }
        if (opts.ordering) {
            const orderByArg = field.args.find(a => a.inputType.type === `${field.outputType.type}OrderByInput` &&
                a.name === 'orderBy');
            if (!orderByArg) {
                throw new Error(`Could not find ordering argument for ${prismaModelName}.${field.name}`);
            }
            if (opts.ordering !== true) {
                this.whitelistMap[this.argTypeName(graphQLTypeName, field.name, orderByArg.inputType.type, orderByArg.inputType.kind)] = Object.keys(opts.ordering).filter(fieldName => opts.ordering[fieldName] === true);
            }
            args.push(orderByArg);
        }
        if (opts.pagination) {
            if (opts.pagination === true) {
                const paginationKeys = ['first', 'last', 'before', 'after', 'skip'];
                args.push(...field.args.filter(a => paginationKeys.includes(a.name)));
            }
            else {
                const paginationKeys = Object.keys(opts.pagination);
                args.push(...field.args.filter(a => paginationKeys.includes(a.name)));
            }
        }
        return args;
    }
    dmmfArgsToNexusArgs(parentTypeName, field, args) {
        return args.reduce((acc, arg) => {
            if (arg.inputType.kind === 'scalar') {
                acc[arg.name] = nexus_1.core.arg(utils_1.nexusOpts(arg.inputType));
            }
            else {
                const typeName = this.argTypeName(parentTypeName, field.name, arg.inputType.type, arg.inputType.kind);
                if (!this.visitedInputTypesMap[typeName]) {
                    acc[arg.name] = this.createInputEnumType(parentTypeName, field, arg);
                }
                else {
                    acc[arg.name] = nexus_1.core.arg(utils_1.nexusOpts(Object.assign({}, arg.inputType, { type: typeName })));
                }
            }
            return acc;
        }, {});
    }
    buildSchemaForCRUD(t, parentTypeName, mappedFields) {
        const result = mappedFields.reduce((acc, mappedField) => {
            const prismaModelName = mappedField.mapping.model;
            mappedField.fields.forEach(field => {
                const mappedFieldName = utils_1.getCRUDFieldName(prismaModelName, field.name, mappedField.mapping, this.fieldNamingStrategy);
                acc[mappedFieldName] = opts => {
                    const mergedOpts = Object.assign({ pagination: true, type: field.outputType.type }, opts);
                    const fieldName = mergedOpts.alias
                        ? mergedOpts.alias
                        : mappedFieldName;
                    const type = mergedOpts.type;
                    const operationName = Object.keys(mappedField.mapping).find(key => mappedField.mapping[key] === field.name);
                    if (!operationName) {
                        throw new Error('Could not find operation name for field ' + field.name);
                    }
                    t.field(fieldName, Object.assign({}, utils_1.nexusOpts(Object.assign({}, field.outputType, { type })), { args: this.computeArgsFromField(prismaModelName, parentTypeName, operationName, field, mergedOpts), resolve: (_, args, ctx) => {
                            const photon = this.params.photon(ctx);
                            utils_1.assertPhotonInContext(photon);
                            return photon[mappedField.mapping.plural][operationName](args);
                        } }));
                    return result;
                };
            });
            return acc;
        }, {});
        return result;
    }
    createInputEnumType(parentTypeName, field, arg) {
        this.visitedInputTypesMap[this.argTypeName(parentTypeName, field.name, arg.inputType.type, arg.inputType.kind)] = true;
        if (arg.inputType.kind === 'enum') {
            const eType = this.dmmf.getEnumType(arg.inputType.type);
            return nexus_1.enumType({
                name: eType.name,
                members: eType.values,
            });
        }
        else {
            const input = this.dmmf.getInputType(arg.inputType.type);
            const inputName = input.isWhereType ||
                input.isOrderType ||
                this.isRelationFilterArg(input.name)
                ? this.argTypeName(parentTypeName, field.name, input.name, 'object')
                : input.name;
            const filteredFields = this.whitelistMap[inputName]
                ? input.fields.filter(f => this.whitelistMap[inputName].includes(f.name))
                : input.fields;
            return nexus_1.inputObjectType({
                name: inputName,
                definition: t => {
                    filteredFields.forEach(inputArg => {
                        if (inputArg.inputType.kind === 'scalar') {
                            t.field(inputArg.name, utils_1.nexusOpts(inputArg.inputType));
                        }
                        else {
                            const argumentTypeName = this.argTypeName(parentTypeName, field.name, inputArg.inputType.type, inputArg.inputType.kind);
                            const type = this.visitedInputTypesMap[argumentTypeName] === true
                                ? argumentTypeName
                                : this.createInputEnumType(parentTypeName, field, inputArg);
                            t.field(inputArg.name, utils_1.nexusOpts(Object.assign({}, inputArg.inputType, { type })));
                        }
                    });
                },
            });
        }
    }
    buildSchemaForPrismaModel(prismaModelName, graphQLTypeName, t) {
        const model = this.dmmf.getModelOrThrow(prismaModelName);
        const outputType = this.dmmf.getOutputType(model.name);
        const result = outputType.fields.reduce((acc, graphqlField) => {
            acc[graphqlField.name] = opts => {
                if (!opts) {
                    opts = {};
                }
                if (!opts.pagination) {
                    opts.pagination = true;
                }
                const fieldName = opts.alias ? opts.alias : graphqlField.name;
                const type = opts.type ? opts.type : graphqlField.outputType.type;
                const fieldOpts = Object.assign({}, utils_1.nexusOpts(Object.assign({}, graphqlField.outputType, { type })), { args: this.computeArgsFromField(prismaModelName, graphQLTypeName, null, graphqlField, opts) });
                // Rely on default resolvers for scalars and enums
                if (graphqlField.outputType.kind === 'object') {
                    const mapping = this.dmmf.getMapping(prismaModelName);
                    fieldOpts.resolve = (root, args, ctx) => {
                        const photon = this.params.photon(ctx);
                        utils_1.assertPhotonInContext(photon);
                        return photon[mapping.plural]['findOne']({ where: { id: root.id } })[graphqlField.name](args);
                    };
                }
                t.field(fieldName, fieldOpts);
                return result;
            };
            return acc;
        }, {});
        return result;
    }
    isRelationFilterArg(type) {
        return (type.endsWith('Filter') &&
            ![
                'IntFilter',
                'StringFilter',
                'BooleanFilter',
                'NullableStringFilter',
                'FloatFilter',
            ].includes(type) &&
            type !== 'Filter');
    }
    argTypeName(graphQLTypeName, fieldName, inputTypeName, kind) {
        if (kind === 'object') {
            const input = this.dmmf.getInputType(inputTypeName);
            if (!input) {
                throw new Error('Could not find input with name: ' + graphQLTypeName);
            }
            if (input.isWhereType) {
                return this.argsNamingStrategy.whereInput(graphQLTypeName, fieldName);
            }
            if (input.isOrderType) {
                return this.argsNamingStrategy.orderByInput(graphQLTypeName, fieldName);
            }
            if (this.isRelationFilterArg(inputTypeName)) {
                return this.argsNamingStrategy.relationFilterInput(graphQLTypeName, fieldName);
            }
            return inputTypeName;
        }
        if (kind === 'enum') {
            return inputTypeName;
        }
        return inputTypeName;
    }
    getPrismaScalars() {
        const allScalarNames = utils_1.flatMap(this.dmmf.schema.outputTypes, o => o.fields)
            .filter(f => f.outputType.kind === 'scalar' &&
            !scalars_1.GQL_SCALARS_NAMES.includes(f.outputType.type))
            .map(f => f.outputType.type);
        const dedupScalarNames = [...new Set(allScalarNames)];
        const scalars = [];
        if (dedupScalarNames.includes('DateTime')) {
            scalars.push(scalars_1.dateTimeScalar);
        }
        return scalars;
    }
}
exports.NexusPrismaBuilder = NexusPrismaBuilder;


/***/ }),

/***/ 755:
/***/ (function(__unusedmodule, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pluralize_1 = __importDefault(__webpack_require__(247));
const utils_1 = __webpack_require__(163);
exports.defaultArgsNamingStrategy = {
    whereInput(typeName, fieldName) {
        return `${utils_1.upperFirst(typeName)}${utils_1.upperFirst(fieldName)}WhereInput`;
    },
    orderByInput(typeName, fieldName) {
        return `${utils_1.upperFirst(typeName)}${utils_1.upperFirst(fieldName)}OrderByInput`;
    },
    relationFilterInput(typeName, fieldName) {
        return `${utils_1.upperFirst(typeName)}${utils_1.upperFirst(fieldName)}Filter`;
    },
};
exports.defaultFieldNamingStrategy = {
    findOne: (_, modelName) => modelName.toLowerCase(),
    findMany: (_, modelName) => pluralize_1.default(modelName).toLowerCase(),
    create: fieldName => fieldName,
    update: fieldName => fieldName,
    delete: fieldName => fieldName,
    deleteMany: fieldName => fieldName,
    updateMany: fieldName => fieldName,
    upsert: fieldName => fieldName,
};


/***/ }),

/***/ 826:
/***/ (function(__unusedmodule, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const NexusPrismaBuilder_1 = __webpack_require__(656);
function nexusPrismaPlugin(params) {
    const builder = new NexusPrismaBuilder_1.NexusPrismaBuilder(params);
    return builder.getNexusPrismaMethod();
}
exports.nexusPrismaPlugin = nexusPrismaPlugin;


/***/ }),

/***/ 954:
/***/ (function(__unusedmodule, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getSupportedQueries(mapping) {
    return [mapping.findOne, mapping.findMany].filter(Boolean);
}
exports.getSupportedQueries = getSupportedQueries;
function getSupportedMutations(mapping) {
    return [
        mapping.create,
        mapping.update,
        mapping.updateMany,
        mapping.delete,
        mapping.deleteMany,
        mapping.upsert,
    ].filter(Boolean);
}
exports.getSupportedMutations = getSupportedMutations;


/***/ })

/******/ });