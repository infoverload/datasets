import { core } from 'nexus';
import { NexusPrismaParams } from '.';
import { ExternalDMMF as DMMF } from '../dmmf/dmmf-types';
import { DMMFClass } from '../dmmf/DMMFClass';
import { IArgsNamingStrategy, IFieldNamingStrategy } from './NamingStrategies';
interface NexusPrismaMethodParams {
    alias?: string;
    type?: string;
    pagination?: boolean | Record<string, boolean>;
    filtering?: boolean | Record<string, boolean>;
    ordering?: boolean | Record<string, boolean>;
}
declare type FieldsWithModelName = {
    fields: DMMF.SchemaField[];
    mapping: DMMF.Mapping;
};
export declare class NexusPrismaBuilder {
    protected params: NexusPrismaParams;
    protected readonly dmmf: DMMFClass;
    protected visitedInputTypesMap: Record<string, boolean>;
    protected whitelistMap: Record<string, string[]>;
    protected argsNamingStrategy: IArgsNamingStrategy;
    protected fieldNamingStrategy: IFieldNamingStrategy;
    constructor(params: NexusPrismaParams);
    getNexusPrismaMethod(): any[];
    /**
     * Generate `t.crud` output method
     */
    protected getCRUDDynamicOutputMethod(): import("nexus/dist/dynamicProperty").DynamicOutputPropertyDef<"crud">;
    /**
     * Generate `t.model` output method
     */
    protected getModelDynamicOutputMethod(): import("nexus/dist/dynamicProperty").DynamicOutputPropertyDef<"model">;
    protected buildModel(t: core.OutputDefinitionBlock<any>, graphQLTypeName: string): Record<string, (opts?: NexusPrismaMethodParams | undefined) => any>;
    protected computeArgsFromField(prismaModelName: string, graphQLTypeName: string, operationName: keyof DMMF.Mapping | null, field: DMMF.SchemaField, opts: NexusPrismaMethodParams): Record<string, any>;
    protected argsForQueryOrModelField(prismaModelName: string, graphQLTypeName: string, field: DMMF.SchemaField, opts: NexusPrismaMethodParams): DMMF.SchemaArg[];
    protected dmmfArgsToNexusArgs(parentTypeName: string, field: DMMF.SchemaField, args: DMMF.SchemaArg[]): Record<string, any>;
    protected buildSchemaForCRUD(t: core.OutputDefinitionBlock<any>, parentTypeName: string, mappedFields: FieldsWithModelName[]): Record<string, (opts?: NexusPrismaMethodParams | undefined) => any>;
    protected createInputEnumType(parentTypeName: string, field: DMMF.SchemaField, arg: DMMF.SchemaArg): core.NexusEnumTypeDef<string> | core.NexusInputObjectTypeDef<string>;
    protected buildSchemaForPrismaModel(prismaModelName: string, graphQLTypeName: string, t: core.OutputDefinitionBlock<any>): Record<string, (opts?: NexusPrismaMethodParams | undefined) => any>;
    protected isRelationFilterArg(type: string): boolean;
    protected argTypeName(graphQLTypeName: string, fieldName: string, inputTypeName: string, kind: DMMF.FieldKind): string;
    protected getPrismaScalars(): any[];
}
export {};
