import { IDatabaseCredentials, IPhotonResponse } from './';
interface IPhotonOptions {
    datamodel: string;
    binaryPath: string;
}
declare class Photon {
    private datamodel;
    private typings;
    private binaryPath;
    private photon;
    private requestArgs;
    private queuedRequests;
    static validateCredentials: (credentials: IDatabaseCredentials) => Promise<void>;
    /**
     * Introspect a DB to generate a datamodel v2 string
     */
    introspect: (credentials: IDatabaseCredentials) => Promise<any>;
    /**
     * Start the photon client
     */
    start: ({ datamodel, binaryPath }: IPhotonOptions) => Promise<void>;
    /**
     * Returns generated client's typings
     */
    getTypings: () => string;
    /**
     * Returns the DMMF
     */
    getDMMF: () => Promise<any>;
    /**
     * Send a Photon query to the binary. Resolves with the response.
     *
     * @param query
     */
    request: (query: string) => Promise<IPhotonResponse>;
    /**
     * Safely stop the binary
     */
    stop: () => Promise<void>;
    /**
     * Generates the Photon client
     */
    private generateClient;
}
export default Photon;
